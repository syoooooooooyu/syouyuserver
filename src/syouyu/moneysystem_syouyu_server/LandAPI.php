<?php

namespace syouyu\moneysystem_syouyu_server;

use pocketmine\math\AxisAlignedBB;
use pocketmine\math\Vector3;
use pocketmine\player\Player;
use pocketmine\utils\Config;
use syouyu\moneysystem_syouyu_server\command\endPos;
use syouyu\moneysystem_syouyu_server\command\land;
use syouyu\moneysystem_syouyu_server\command\showPayedHistory;
use syouyu\moneysystem_syouyu_server\command\startPos;
use syouyu\moneysystem_syouyu_server\event\BlockEvent;
use syouyu\server_core\Main;

class LandAPI {

	const BlockPerMoney = 50;
	private static LandAPI $i;

	public function __load(Main $plugin){
		self::$i = $this;
		$plugin->getServer()->getPluginManager()->registerEvents(new BlockEvent(), $plugin);
	}

	public static function getInstance() : self{
		return self::$i; // TODO: Change the autogenerated stub
	}

	public function registerLand(AxisAlignedBB $BB, Player $player, string $world):void{
		$BB->minY = 0; $BB->maxY = 256;
		$config = new Config(Main::getInstance()->getDataFolder()."MoneySystem/LandId.yml");
		$args = serialize([]);
		$BB = serialize($BB);
		$land = MoneySystemAPI::getInstance()->land;
		$land->exec("INSERT INTO Land (Id, Player, Invite, Axis, World) VALUES ({$config->get('id')}, '{$player->getName()}', '{$args}', '{$BB}', '{$world}')");
	}

	public function canRegisterLand(AxisAlignedBB $axis, Player $player): bool{
		$land = MoneySystemAPI::getInstance()->land;
	    $result = $land->prepare("SELECT Axis, World FROM Land")->execute();
		while($res = $result->fetchArray(SQLITE3_ASSOC)){
			/** @var AxisAlignedBB $a */
			$a = unserialize($res["Axis"]);
			if($a->intersectsWith($axis)) {
				if($player->getWorld()->getDisplayName() !== $res["World"]) continue;
				return false;
			}
		}
		return true;
	}

	public function canChange(Vector3 $vector3, Player $player) : bool{
		$land = MoneySystemAPI::getInstance()->land;
		$result = $land->prepare("SELECT * FROM Land")->execute();
		while($res = $result->fetchArray(SQLITE3_ASSOC)){
			/** @var AxisAlignedBB $axis */
			$axis = unserialize($res["Axis"]);
			if($axis->isVectorInXZ($vector3)){
				if($player->getWorld()->getDisplayName() !== $res["World"]) continue;
				if($res["Player"] == $player->getName()){
					return true;
				}else{
					/** @var array $array*/
					foreach(unserialize($res["Invite"]) as $array){
						if($array == $player->getName()) return true;
					}
					if($player->getWorld()->getDisplayName() !== $res["World"]) continue;
					return false;
				}
			}
		}
		return true;
	}

	public function removeLand(int $id):void{
		$land = MoneySystemAPI::getInstance()->land;
		$stmt = $land->prepare("SELECT Id FROM Land WHERE Id = $id");
		$result = $stmt->execute();
		while($result->fetchArray(SQLITE3_ASSOC)){
			$land->exec("DELETE FROM Land WHERE Id = $id");
		}
	}

	/**
	 * @param int               $id
	 * @param Player|string     $player
	 * @param Player[]|string[] $players
	 */
	public function invitePlayer(int $id, Player|string $player, array $players):void{
		$invite = [];
		foreach($players as $p){
			$invite = [];
			if($p instanceof Player){
				$p = $p->getName();
			}
			$invite[] = $p;
		}
		if($player instanceof Player){
			$player = $player->getName();
		}
		$land = MoneySystemAPI::getInstance()->land;
		$stmt = $land->prepare("SELECT * FROM Land WHERE Id = $id");
		$result = $stmt->execute();
		while($res = $result->fetchArray(SQLITE3_ASSOC)){
			if($res["Player"] == $player){
				/** @var array $array */
				$array = unserialize($res["Invite"]);
				foreach($array as $a){
					$invite[] = $a;
				}
				$land->exec("DELETE FROM Land WHERE Id = $id");
				$invite = serialize($invite[]);
				$player = $res["Player"];
				$axis = $res["Axis"];
				$world = $res["World"];
				$land->exec("INSERT INTO Land(Id, Player, Invite, Axis, World) VALUES ($id, $player, $invite, $axis, $world)");
			}
		}
	}
}